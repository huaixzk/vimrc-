let mapleader = ";"   "映射
nmap <space> :
"把空格映射为：
" 快捷打开编辑vimrc文件的键盘绑定
map <silent> <leader>ee :e $HOME/.vimrc<cr>
autocmd! bufwritepost *.vimrc source $HOME/.vimrc
" 保存文件
nmap <leader>ww :w!<cr>
" ^z快速进入shell
nmap <C-Z> :shell<cr>
" 判断操作系统
if (has("win32") || has("win64") || has("win32unix"))
    let g:isWin = 1
else
    let g:isWin = 0
endif

" 判断是终端还是gvim
if has("gui_running")
    let g:isGUI = 1
else
    let g:isGUI = 0
endif

set pastetoggle=<F11>  "vim paste mode
set nocompatible    " 关闭兼容模式
syntax enable       " 语法高亮
filetype plugin on  " 文件类型插件
filetype indent on
"set autoindent
autocmd BufEnter * :syntax sync fromstart
set nu              " 显示行号
set showcmd         " 显示命令
set lz              " 当运行宏时，在命令执行完成之前，不重绘屏幕
set hid             " 可以在没有保存的情况下切换buffer
set backspace=eol,start,indent
set whichwrap+=<,>,h,l,s,b " 退格键和方向键可以换行
set incsearch       " 增量式搜索
set hlsearch        " 高亮搜索
set ignorecase      " 搜索时忽略大小写
set smartcase  "但在有一个或以上大写字母时,仍保持对大小写敏感
set magic           " 额，自己:h magic吧，一行很难解释
set showmatch       " 显示匹配的括号
set nobackup        " 关闭备份
set nowb
set noswapfile      " 不使用swp文件，注意，错误退出后无法恢复
set lbr             " 在breakat字符处而不是最后一个字符处断行
"set ai              " 自动缩进
"set si              " 智能缩进
set cindent         " C/C++风格缩进
set wildmenu
set nofen
set fdl=10

" tab转化为4个字符
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4

" 不使用beep或flash
set vb t_vb=

colorscheme blacklight
"colorscheme  baycomb
"colorscheme  hhazure
"colorscheme  navajo-night
"colorscheme  vj
"colorscheme  watermark
set t_Co=256

set history=1024  " vim记住的历史操作的数量，默认的是20
set autoread     " 当文件在外部被修改时，自动重新读取
set mouse=a      " 在所有模式下都允许使用鼠标，还可以是n,v,i,c等

"在gvim中高亮当前行
if (g:isGUI)
    set cursorline
    hi cursorline guibg=#333333
    hi CursorColumn guibg=#333333
    "set guifont=Consolas\ 14
    "set guifontwide=Consolas\ 14
endif

" 设置字符集编码，默认使用utf8
if (g:isWin)
    let &termencoding=&encoding " 通常win下的encoding为cp936
    set fileencodings=utf8,cp936,ucs-bom,latin1
else
    set encoding=utf8
    set fileencodings=utf8,gb2312,gb18030,ucs-bom,latin1
endif

" 状态栏
set laststatus=2      " 总是显示状态栏
highlight StatusLine cterm=bold ctermfg=yellow ctermbg=blue
"highlight StatusLine cterm=bold ctermfg=green ctermbg=Blue
highlight StatusLineNC cterm=bold ctermfg=cyan ctermbg=black
"highlight Pmenu ctermbg=cyan guibg=LightGray
"highlight Pmenu ctermbg=brown gui=bold
highlight Pmenu ctermbg=cyan ctermfg=black guibg=cyan gui=bold
highlight PmenuSel ctermbg=darkgray ctermfg=white guibg=DarkBlue guifg=White
highlight PmenuSbar ctermbg=brown ctermfg=Brown guibg=Cyan
highlight PmenuThumb ctermfg=black ctermfg=lightblue guifg=White
" 获取当前路径，将$HOME转化为~
function! CurDir()
    let curdir = substitute(getcwd(), $HOME, "~", "g")
    return curdir
endfunction
set statusline=[%n]\ %f%m%r%h\ \|\ \ pwd:\ %{CurDir()}\ \ \|%=\|\ %l,%c\ %p%%\ \|\ ascii=%b,hex=%b%{((&fenc==\"\")?\"\":\"\ \|\ \".&fenc)}\ \|\ %{$USER}\ @\ %{hostname()}\

"第80列往后加下划线
"au BufWinEnter * let w:m2=matchadd('Underlined', '\%>' . 80 . 'v.\+', -1)

" 根据给定方向搜索当前光标下的单词，结合下面两个绑定使用
function! VisualSearch(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"
    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")
    if a:direction == 'b'
        execute "normal ?" . l:pattern . "<cr>"
    else
        execute "normal /" . l:pattern . "<cr>"
    endif
    let @/ = l:pattern
    let @" = l:saved_reg
endfunction
" 用 */#向 前/后 搜索光标下的单词
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>

" 在文件名上按gf时，在新的tab中打开
map gf :tabnew <cfile><cr>

" 用c-j,k在buffer之间切换
nn <C-J> :bn<cr>
nn <C-K> :bp<cr>

" Bash(Emacs)风格键盘绑定
imap <C-e> <END>
imap <C-a> <HOME>
"imap <C-u> <esc>d0i
"imap <C-k> <esc>d$i  " 与自动补全中的绑定冲突

" 恢复上次文件打开位置
set viminfo='10,\"100,:20,%,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" 删除buffer时不关闭窗口
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
    let l:currentBufNum = bufnr("%")
    let l:alternateBufNum = bufnr("#")

    if buflisted(l:alternateBufNum)
        buffer #
    else
        bnext
    endif

    if bufnr("%") == l:currentBufNum
        new
    endif

    if buflisted(l:currentBufNum)
        execute("bdelete! ".l:currentBufNum)
    endif
endfunction

" 快捷输入
" 自动完成括号和引号
inoremap <leader>1 ()<esc>:let leavechar=")"<cr>i
inoremap <leader>2 []<esc>:let leavechar="]"<cr>i
inoremap <leader>3 {}<esc>:let leavechar="}"<cr>i
inoremap <leader>4 {<esc>o}<esc>:let leavechar="}"<cr>O
inoremap <leader>q ''<esc>:let leavechar="'"<cr>i
inoremap <leader>w ""<esc>:let leavechar='"'<cr>i

" 缩写
iab idate <c-r>=strftime("%Y-%m-%d")<CR>
iab itime <c-r>=strftime("%H:%M")<CR>
iab imail huaixiaoz <huaixiaoz@gmail.com>
iab iumail huaixiaoz@live.com
iab igmail huaixiaoz@gmail.com
iab iname huaixiaoz

" 插件窗口的宽度，如TagList,NERD_tree等，自己设置
let s:PlugWinSize =30
"
" ShowFunc.vim  <-------- 暂时没有使用
" http://www.vim.org/scripts/script.php?script_id=397
" F2打开ShowFunc TagList窗口，显示C/C++函数原型
" map <F2> <Plug>ShowFunc
" map! <F2> <Plug>ShowFunc

" taglist.vim
" http://www.vim.org/scripts/script.php?script_id=273
" <leader>t 打开TagList窗口，窗口在右边
"在taglist窗口中，可以使用下面的快捷键：
"<CR>      跳到光标下tag所定义的位置，用鼠标双击此tag功能也一样
"o         在一个新打开的窗口中显示光标下tag
"<Space>   显示光标下tag的原型定义
"u         更新taglist窗口中的tag
"s         更改排序方式，在按名字排序和按出现顺序排序间切换
"x         taglist窗口放大和缩小，方便查看较长的tag
"+         打开一个折叠，同zo
"-         将tag折叠起来，同zc
"*         打开所有的折叠，同zR
"=         将所有tag折叠起来，同zM
"[[        跳到前一个文件
"]]        跳到后一个文件
"q         关闭taglist窗口
"<F1>      显示帮助
"使用 :Tlist
":help taglist.txt  ( ~/.vim/doc/taglist.txt )
"
" <leader>t 打开TagList窗口，窗口在右边
nmap <silent> <leader>t :TlistToggle<cr>

let Tlist_Use_SingleClick = 1
let Tlist_Process_File_Always = 1

let Tlist_Ctags_Cmd = '/usr/bin/ctags'
let Tlist_Show_One_File = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Use_Right_Window = 1
let Tlist_File_Fold_Auto_Close = 1
let Tlist_GainFocus_On_ToggleOpen = 0
let Tlist_WinWidth = s:PlugWinSize
let Tlist_Auto_Open = 0
let Tlist_Display_Prototype = 1
let Tlist_Close_On_Select = 0

" minibufexpl.vim
" http://www.vim.org/scripts/script.php?script_id=159
" 不需要配置

" OmniCppComplete.vim
" http://www.vim.org/scripts/script.php?script_id=1520
set tags+=/usr/include/tags

set omnifunc=syntaxcomplete#Complete

let omnicpp_namespacesearch = 1
let omnicpp_globalscopesearch = 1
let omnicpp_showaccess = 1
let omnicpp_showprototypeinabbr = 1     " show function parameters
let omnicpp_maycompletedot = 1          " autocomplete after .
let OmniCpp_SelectFirstItem = 2
let omnicpp_maycompletearrow = 1        " autocomplete after ->
let omnicpp_maycompletescope = 1        " autocomplete after ::
let omnicpp_defaultnamespaces = ["std", "_glibcxx_std"]
""automatically open and close the popup menu / preview window
"au cursormovedi,insertleave * if pumvisible() == 0|silent! pclose|endif
""set completeopt=menuone,menu,longest,preview
""自定义快捷键 ( 若使用neocomplcache插件: 已定义了下面很多映射 )
"inoremap <expr> <cr>       pumvisible()?"/<c-y>":"/<cr>"
"inoremap <expr> <c-j>      pumvisible()?"/<pagedown>/<c-n>/<c-p>":"/<c-x><c-o>" "注意cvim.zip另有映射,而且很强大
inoremap <expr> <c-k>      pumvisible()?"/<pageup>/<c-p>/<c-n>":"/<c-k>"
inoremap <expr> <c-u>      pumvisible()?"/<c-e>":"/<c-u>"
"inoremap <expr> <c-p>      pumvisible()?"/<up>":"/<c-p>"
"inoremap <expr> <c-n>      pumvisible()?"/<down>":"/<c-n>"
""上面的映射都是在插入模式下的映射，解释如下
""如果下拉菜单弹出，回车映射为接受当前所选项目，否则，仍映射为回车
""如果下拉菜单弹出，ctrl-j映射为在下拉菜单中向下翻页。否则映射为ctrl-x ctrl-o
""如果下拉菜单弹出，ctrl-k映射为在下拉菜单中向上翻页，否则仍映射为ctrl-k
""如果下拉菜单弹出，ctrl-u映射为ctrl-e，即停止补全，否则，仍映射为ctrl-u
""如果下拉菜单弹出，ctrl-p映射为在下拉菜单中表示上一项。
""如果下拉菜单弹出，ctrl-n映射为在下拉菜单中表示下一项。
"":set omnifunc ? 查看设置的补全插件
""}}}
"omnicppcomplete : c/c++ omni-completion with ctags database

let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1 " Use SmartCase
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '/*ku/*'

"let g:neocomplcache_enable_auto_select = 1 
"let g:neocomplcache_disable_auto_complete = 1 
inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<TAB>" 
"inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>" 
" Enable omni completion. 
 autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS 
 autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags 
 autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS 
 autocmd FileType python setlocal omnifunc=pythoncomplete#Complete 
 autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags 

" Define keyword. 
if !exists('g:neocomplcache_keyword_patterns') 
    let g:neocomplcache_keyword_patterns = {} 
endif 
let g:neocomplcache_keyword_patterns['default'] = '\h\w*' 

 if !exists('g:neocomplcache_omni_patterns') 
 let g:neocomplcache_omni_patterns = {} 
 endif 
 let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::' 
 autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete 
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'

let g:neocomplcache_enable_auto_select = 0
let g:neocomplcache_enable_quick_match = 1

set path+=/usr/include/
set path+=/usr/include/linux/

set completeopt=menu,longest
"let OmniCpp_ShowPrototypeInAbbr = 1
"let OmniCpp_DefaultNamespaces = ["std"]     " 逗号分割的字符串
"let OmniCpp_MayCompleteScope = 1
" c-j自动补全，当补全菜单打开时，c-j,k上下选择
imap <expr> <c-j>      pumvisible()?"\<C-N>":"\<C-X><C-O>"
"imap <expr> <c-k>      pumvisible()?"\<C-P>":"\<esc>"
" f:文件名补全，l:行补全，d:字典补全，]:tag补全
imap <C-]>             <C-X><C-]>
imap <C-F>             <C-X><C-F>
imap <C-D>             <C-X><C-D>
imap <C-L>             <C-X><C-L>

let g:SuperTabRetainCompletionType = 2
let g:SuperTabDefaultCompletionType = "<C-X><C-O>" 

" NERD_commenter.vim
" http://www.vim.org/scripts/script.php?script_id=1218
" Toggle单行注释/“性感”注释/注释到行尾/取消注释
"map <leader>cc ,c<space>
"map <leader>cs ,cs
"map <leader>c$ ,c$
"map <leader>cu ,cu

" 更新ctags和cscope索引
" href: http://www.vimer.cn/2009/10/把vim打造成一个真正的ide2.html
" 稍作修改，提取出DeleteFile函数，修改ctags和cscope执行命令
map <F12> :call Do_CsTag()<cr>
function! Do_CsTag()
    let dir = getcwd()

    "先删除已有的tags和cscope文件，如果存在且无法删除，则报错。
    if ( DeleteFile(dir, "tags") )
        return
    endif
    if ( DeleteFile(dir, "cscope.files") )
        return
    endif
    if ( DeleteFile(dir, "cscope.out") )
        return
    endif

    if(executable('ctags'))
        silent! execute "!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q ."
    endif
    if(executable('cscope') && has("cscope") )
        if(g:isWin)
            silent! execute "!dir /s/b *.c,*.cpp,*.h,*.java,*.cs >> cscope.files"
        else
            silent! execute "!find . -iname '*.[ch]' -o -name '*.cpp' > cscope.files"
        endif
        silent! execute "!cscope -b"
        execute "normal :"
        if filereadable("cscope.out")
            execute "cs add cscope.out"
        endif
    endif
    " 刷新屏幕
    execute "redr!"
endfunction

function! DeleteFile(dir, filename)
    if filereadable(a:filename)
        if (g:isWin)
            let ret = delete(a:dir."\\".a:filename)
        else
            let ret = delete("./".a:filename)
        endif
        if (ret != 0)
            echohl WarningMsg | echo "Failed to delete ".a:filename | echohl None
            return 1
        else
            return 0
        endif
    endif
    return 0
endfunction

" cscope 绑定
if has("cscope")
    set csto=1
    set cst
    set nocsverb
    if filereadable("cscope.out")
        cs add cscope.out
    endif
    set csverb
    " s: C语言符号  g: 定义     d: 这个函数调用的函数 c: 调用这个函数的函数
    " t: 文本       e: egrep模式    f: 文件     i: include本文件的文件
    nmap <leader>ss :cs find s <C-R>=expand("<cword>")<CR><CR>:copen<CR>
    nmap <leader>sg :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <leader>sc :cs find c <C-R>=expand("<cword>")<CR><CR>:copen<CR>
    nmap <leader>st :cs find t <C-R>=expand("<cword>")<CR><CR>:copen<CR>
    nmap <leader>se :cs find e <C-R>=expand("<cword>")<CR><CR>:copen<CR>
    nmap <leader>sf :cs find f <C-R>=expand("<cfile>")<CR><CR>:copen<CR>
    nmap <leader>si :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>:copen<CR>
    nmap <leader>sd :cs find d <C-R>=expand("<cword>")<CR><CR>:copen<CR>
endif

" Quick Fix 设置
map <leader>cw :cw<cr>
map <F3> :cp<cr>
map <F4> :cn<cr>

" lookup file
" http://www.vim.org/scripts/script.php?script_id=1581
" 增加一行（line 295）: let pattern = '\c' . a:pattern
" 按F5或者;ff打开文件搜索窗口
let g:LookupFile_MinPatLength = 0
let g:LookupFile_PreserveLastPattern = 0
let g:LookupFile_PreservePatternHistory = 0
let g:LookupFile_AlwaysAcceptFirst = 1
let g:LookupFile_AllowNewFiles = 0
if filereadable("./filenametags")
  let g:LookupFile_TagExpr = '"./filenametags"'
endif
nmap <silent> <leader>ff :LookupFile<cr>

function! LookupFile_IgnoreCaseFunc(pattern)
    let _tags = &tags
    try
        let &tags = eval(g:LookupFile_TagExpr)
        let newpattern = '\c' . a:pattern
        let tags = taglist(newpattern)
    catch
        echohl ErrorMsg | echo "Exception: " . v:exception | echohl NONE
        return ""
    finally
        let &tags = _tags
    endtry

    " Show the matches for what is typed so far.
    let files = map(tags, 'v:val["filename"]')
    return files
endfunction
let g:LookupFile_LookupFunc = 'LookupFile_IgnoreCaseFunc'

" Buffers Explorer （需要genutils.vim）
" http://vim.sourceforge.net/scripts/script.php?script_id=42
" http://www.vim.org/scripts/script.php?script_id=197
let g:bufExplorerDefaultHelp=0       " Do not show default help.
let g:bufExplorerShowRelativePath=1  " Show relative paths.
let g:bufExplorerSortBy='mru'        " Sort by most recently used.
let g:bufExplorerSplitRight=0        " Split left.
let g:bufExplorerSplitVertical=1     " Split vertically.
let g:bufExplorerSplitVertSize = s:PlugWinSize  " Split width
let g:bufExplorerUseCurrentWindow=1  " Open in new window.
autocmd BufWinEnter \[Buf\ List\] setl nonumber

nmap <silent> <Leader>b :BufExplorer<CR>

" mine
" " "  " " "  "
"set nowrapscan "搜索到两端时不回搜
"set noerrotbells  "关闭错误提示音
"set novisulbell
"set t_vb_

" 解决自动换行格式下, 如高度在折行之后超过窗口高度结果这一行看不到的问题
set display=lastline
"启动时不显示 捐赠提示
set shortmess=atl

" {{{ 开始折叠
set foldenable
" 设置语法折叠
" manual  手工定义折叠
" indent  更多的缩进表示更高级别的折叠
" expr    用表达式来定义折叠
" syntax  用语法高亮来定义折叠
" diff    对没有更改的文本进行折叠
" marker  对文中的标志折叠
set foldmethod=manual
"折叠相关的快捷键
"zR 打开所有的折叠
"za Open/Close (toggle) a folded group of lines.
"zA Open a Closed fold or close and open fold recursively.
"zi 全部 展开/关闭 折叠
"zo 打开 (open) 在光标下的折叠
"zc 关闭 (close) 在光标下的折叠
"zC 循环关闭 (Close) 在光标下的所有折叠
"zM 关闭所有可折叠区域
" 设置折叠区域的宽度
set foldcolumn=0
" 设置折叠层数为
setlocal foldlevel=1
" 新建的文件，刚打开的文件不折叠
autocmd! BufNewFile,BufRead * setlocal nofoldenable
" }}}

" Alt-W切换自动换行
noremap <a-w> :exe &wrap==1 ? 'set nowrap' : 'set wrap'<cr>x

" 选中状态下 Ctrl+c 复制
vnoremap <C-C> "+y
" Shift + Delete 插入系统剪切板中的内容
noremap <S-Del> "+p
inoremap <S-Del> <esc>"+pa
vnoremap <S-Del> d"+P
"设置代码折叠方式为 手工  indent
"set foldmethod=indent
"设置代码块折叠后显示的行数
set foldexpr=1

if has("gui_running")
    "set guioptions-=m " 隐藏菜单栏
    "set guioptions-=T " 隐藏工具栏
    "set guioptions-=L " 隐藏左侧滚动条
    "set guioptions-=r " 隐藏右侧滚动条
    "set guioptions-=b " 隐藏底部滚动条
    "set showtabline=0 " 隐藏Tab栏
endif
" 删除所有行未尾空格
"nnoremap <f12> :%s/[ \t\r]\+$//g<cr>

" 窗口切换
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k

set helplang=cn
"set foldcolumn=4
" 标示折叠  set flodcolumn-=4
"打开所有光标行上的折叠用 |zO|。
"关闭所有光标行上的折叠用 |zC|。
"删除一个光标行上的折叠用 |zd|。
"删除所有光标行上的折叠用 |zD|。
set foldopen=all
"遇到光标折叠打开自动
"set foldopen
set foldclose=all

"你可以在折叠栏内用鼠标点击 "+" ，以打开一个折叠。点击 "-" ，或在它之下的某个
"|" ，将关闭一个打开的折叠。
"以空格打开折叠
"nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>


"打开自动缩进和 C 语言风格的缩进模式,定制 C 语言缩进风格
set cindent
set scrolloff=4
set textwidth=84
"set completeopt=menuone,longest,preview
